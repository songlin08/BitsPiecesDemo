基本概念
    进程 : 一个应用程序的执行实例
    线程 : 一个进程内部的多个执行路径, 它是CPU调度的最小单元
    注意 : 多个线程并不是真正地并行执行, 这由CPU核心数决定
    一般来讲, 线程用来并行地执行一些较耗时的任务
    主线程 : 应用程序启动时, 要按顺序执行main方法中的代码, 这个线程是主线程
    子线程 : 在主线程中创建的新线程称为子线程
    守护线程 : 为其它线程服务的线程是守护线程, 如JVM的垃圾回收器(GC)
并行与并发：
    并行：多个cpu实例或者多台机器同时执行一段处理逻辑，是真正的同时。
    并发：通过cpu调度算法，让用户看上去同时执行，实际上从cpu操作层面不是真正的同时。并发往往在场景中有公用的资源，
         那么针对这个公用的资源往往产生瓶颈，我们会用TPS或者QPS来反应这个系统的处理能力。


多进程是指操作系统能同时运行多个任务（程序）。
多线程是指在同一程序中有多个顺序流在执行。

在java中要想实现多线程，有两种手段，一种是继续Thread类，另外一种是实现Runable接口.
   (其实准确来讲，应该有三种，还有一种是实现Callable接口，并与Future、线程池结合使用)


实现Runnable接口比继承Thread类所具有的优势：
    1）：适合多个相同的程序代码的线程去处理同一个资源
    2）：可以避免java中的单继承的限制
    3）：增加程序的健壮性，代码可以被多个线程共享，代码和数据独立
    4）：线程池只能放入实现Runable或callable类线程，不能直接放入继承Thread的类


线程和进程一样分为五个阶段：创建、就绪、运行、阻塞、终止。
1、新建状态（New）：新创建了一个线程对象。
2、就绪状态（Runnable）：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。
3、运行状态（Running）：就绪状态的线程获取了CPU，执行程序代码。
4、阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：
（一）、等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。(wait会释放持有的锁)
（二）、同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。
（三）、其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。（注意,sleep是不会释放持有的锁）
5、死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。


Thread类的常用方法：
    sleep(): 强迫一个线程睡眠Ｎ毫秒。
　　isAlive(): 判断一个线程是否存活。
　　join(): 等待线程终止。
　　activeCount(): 程序中活跃的线程数。
　　enumerate(): 枚举程序中的线程。
    currentThread(): 得到当前线程。
　　isDaemon(): 一个线程是否为守护线程。
　　setDaemon(): 设置一个线程为守护线程。(用户线程和守护线程的区别在于，是否等待主线程依赖于主线程结束而结束)
　　setName(): 为线程设置一个名称。
　　wait(): 强迫一个线程等待。
　　notify(): 通知一个线程继续运行。
　　setPriority(): 设置一个线程的优先级。